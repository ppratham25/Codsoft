package c;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    private String courseCode;
    private String title;
    private String description;
    private int capacity;
    private List<String> schedule;
    private List<String> enrolledStudents;

    public Course(String courseCode, String title, String description, int capacity, List<String> schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = new ArrayList<>();
    }

    public String getCourseCode() {
        return courseCode;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public List<String> getSchedule() {
        return schedule;
    }

    public List<String> getEnrolledStudents() {
        return enrolledStudents;
    }

    public boolean enrollStudent(String studentName) {
        if (enrolledStudents.size() < capacity) {
            enrolledStudents.add(studentName);
            return true;
        } else {
            return false;
        }
    }

    public boolean removeStudent(String studentName) {
        return enrolledStudents.remove(studentName);
    }

    @Override
    public String toString() {
        return "Course Code: " + courseCode +
                "\nTitle: " + title +
                "\nDescription: " + description +
                "\nCapacity: " + capacity +
                "\nSchedule: " + schedule +
                "\nEnrolled Students: " + enrolledStudents;
    }
}

class Student {
    private int studentID;
    private String name;
    private List<String> registeredCourses;

    public Student(int studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public int getStudentID() {
        return studentID;
    }

    public String getName() {
        return name;
    }

    public List<String> getRegisteredCourses() {
        return registeredCourses;
    }

    public void registerForCourse(String courseCode) {
        registeredCourses.add(courseCode);
    }

    public void dropCourse(String courseCode) {
        registeredCourses.remove(courseCode);
    }

    @Override
    public String toString() {
        return "Student ID: " + studentID +
                "\nName: " + name +
                "\nRegistered Courses: " + registeredCourses;
    }
}

public class r {
    public static void main(String[] args) {
        List<Course> courses = new ArrayList<>();
        List<Student> students = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Course Registration System");
            System.out.println("1. Add Course");
            System.out.println("2. List Courses");
            System.out.println("3. Register Student");
            System.out.println("4. Drop Student from Course");
            System.out.println("5. Exit");
            System.out.print("Select an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter Course Code: ");
                    String courseCode = scanner.nextLine();
                    System.out.print("Enter Course Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Course Description: ");
                    String description = scanner.nextLine();
                    System.out.print("Enter Capacity: ");
                    int capacity = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character

                    List<String> schedule = new ArrayList<>();
                    System.out.println("Enter Course Schedule (enter 'done' to finish): ");
                    while (true) {
                        String day = scanner.nextLine();
                        if (day.equalsIgnoreCase("done")) {
                            break;
                        }
                        schedule.add(day);
                    }

                    Course newCourse = new Course(courseCode, title, description, capacity, schedule);
                    courses.add(newCourse);
                    System.out.println("Course added successfully!");
                    break;

                case 2:
                    System.out.println("Course Listing:");
                    for (Course course : courses) {
                        System.out.println(course.toString() + "\n");
                    }
                    break;

                case 3:
                    System.out.print("Enter Student ID: ");
                    int studentID = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter Student Name: ");
                    String studentName = scanner.nextLine();
                    Student newStudent = new Student(studentID, studentName);
                    students.add(newStudent);

                    System.out.println("Available Courses:");
                    for (int i = 0; i < courses.size(); i++) {
                        Course course = courses.get(i);
                        System.out.println(i + 1 + ". " + course.getCourseCode());
                    }
                    System.out.print("Select a course to register (enter course number): ");
                    int courseNumber = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character

                    if (courseNumber >= 1 && courseNumber <= courses.size()) {
                        Course selectedCourse = courses.get(courseNumber - 1);
                        if (selectedCourse.enrollStudent(studentName)) {
                            newStudent.registerForCourse(selectedCourse.getCourseCode());
                            System.out.println(
                                    "Student registered successfully for course: " + selectedCourse.getCourseCode());
                        } else {
                            System.out.println("Course is already full. Registration failed.");
                        }
                    } else {
                        System.out.println("Invalid course number. Registration failed.");
                    }
                    break;

                case 4:
                    System.out.print("Enter Student ID: ");
                    int studentIdToDrop = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter Course Code to drop: ");
                    String courseCodeToDrop = scanner.nextLine();

                    Student studentToDrop = null;
                    for (Student student : students) {
                        if (student.getStudentID() == studentIdToDrop) {
                            studentToDrop = student;
                            break;
                        }
                    }

                    if (studentToDrop != null && studentToDrop.getRegisteredCourses().contains(courseCodeToDrop)) {
                        Course courseToDrop = null;
                        for (Course course : courses) {
                            if (course.getCourseCode().equalsIgnoreCase(courseCodeToDrop)) {
                                courseToDrop = course;
                                break;
                            }
                        }

                        if (courseToDrop != null && courseToDrop.removeStudent(studentToDrop.getName())) {
                            studentToDrop.dropCourse(courseCodeToDrop);
                            System.out.println("Student dropped successfully from course: " + courseCodeToDrop);
                        } else {
                            System.out.println("Course not found or student not registered in the course.");
                        }
                    } else {
                        System.out.println("Student not found or student not registered in the course.");
                    }
                    break;

                case 5:
                    System.out.println("Exiting the Course Registration System.");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid option. Please select a valid option.");
                    break;
            }
        }
    }

    @Override
    public String toString() {
        return "CourseRegistrationSystem []";
    }
}
